package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name = "ElmoMoving", group = "")
public class ElmoMoving extends LinearOpMode {

    private DcMotor leftFront;
    private DcMotor rightFront;
    private DcMotor leftBack;
    private DcMotor rightBack;

    private DcMotor ramp;
    private DcMotor carousel;
    private DcMotor shooter;
    private DcMotor wobbleGoalLifter;

    private Servo claw;

    private final double robotSpeedCarousel = -0.75;
    private final float robotSpeedRamp = 0.36f;
    private final float robotSpeedLowGoal = 0.28f;
    private final float robotSpeedClaw = 0.15f;
    private final float robotSpeedArm = 0.14f;


    /**
     * This function is executed when this Op Mode is selected from the Driver Station.
     */
    @Override
    public void runOpMode() {
        float speed= 0.0f;
        double turnspeed = 0.0f;

        leftFront = hardwareMap.dcMotor.get("leftFront");
        rightFront = hardwareMap.dcMotor.get("rightFront");
        leftBack = hardwareMap.dcMotor.get("leftBack");
        rightBack = hardwareMap.dcMotor.get("rightBack");

        //wobbleGoalLifter = hardwareMap.dcMotor.get("wobbleGoal");
        //ramp = hardwareMap.dcMotor.get("ramp");
        //shooter = hardwareMap.dcMotor.get("shooter");
        //carousel = hardwareMap.dcMotor.get("carousel");
        //claw = hardwareMap.servo.get("claw");

        // Put initialization blocks here.
        waitForStart();
        if (opModeIsActive()) {
            // Put run blocks here.
            while (opModeIsActive()) {
                speed = 0.0f;
                leftFront.setPower(-speed);
                leftBack.setPower(-speed);
                rightFront.setPower(-speed);
                rightBack.setPower(-speed);
                //Right Trigger makes robot go forward
                if(gamepad1.right_trigger > 0) {
                    leftFront.setPower(gamepad1.right_trigger);
                    leftBack.setPower(gamepad1.right_trigger);
                    rightFront.setPower(gamepad1.right_trigger);
                    rightBack.setPower(gamepad1.right_trigger);
                    telemetry.addData("Moving",  "Forward %f", gamepad1.right_trigger);
                    telemetry.update();
                }

                //Left Trigger makes robot go backward
                if(gamepad1.left_trigger > 0) {
                    leftFront.setPower(-gamepad1.left_trigger);
                    leftBack.setPower(-gamepad1.left_trigger);
                    rightFront.setPower(-gamepad1.left_trigger);
                    rightBack.setPower(-gamepad1.left_trigger);
                    telemetry.addData("Moving", "Backward %f", gamepad1.right_trigger);
                    telemetry.update();
                }


                //Left Joystick makes robot turn
                turnspeed = gamepad1.left_stick_x;
                leftFront.setPower(-turnspeed);
                leftBack.setPower(-turnspeed);
                rightFront.setPower(-turnspeed);
                rightBack.setPower(-turnspeed);
                //Grip and Lift Wobble Goal
                /*while (gamepad2.a) {
                    claw.setPosition(0);
                    wobbleGoalLifter.setPower(robotSpeedArm);

                }

                //Release and Drop Wobble Goal
                while (gamepad2.b) {
                }
                    claw.setPosition(0);
                    wobbleGoalLifter.setPower(-robotSpeedArm);

                }



                while (gamepad1.a) {
                    leftFront.setPower(0.5);
                    sleep(1000);
                    leftFront.setPower(0);
                }
                //Suck in ring with right bumper
                while (gamepad2.right_bumper) {
                    carousel.setPower(robotSpeedCarousel);
                    ramp.setPower(robotSpeedRamp);
                }


                //Shoot with Left Bumper
                while (gamepad2.left_bumper) {
                    shooter.setPower(robotSpeedLowGoal);
                }*/

                telemetry.update();
            }
        }
    }
}
